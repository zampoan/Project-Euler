"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
"""

# How to solve:
# List how long you want sequence to be
# create 3 terms, one for previous, current and added terms
# Add previous element to current element
# Make previous term equal to current term
# Make current term equal to previous term


number_sequence = 10
list_of_numbers = []
sum_of_numbers = []

def fibb_sequence():
    # init variables
    current_term = 2
    previous_term = 1
    list_of_numbers.append(previous_term)
    list_of_numbers.append(current_term)

    for i in range(2, number_sequence):
        # the magic happens
        new_num = current_term + previous_term
        previous_term = current_term
        current_term = new_num
        list_of_numbers.append(new_num)

    return list_of_numbers

def sum_added_values():
    for i in fibb_sequence():
        # find all even values
        if (i % 2) == 0:

            sum_of_numbers.append(i)

    print(sum_of_numbers)


print(fibb_sequence())
sum_added_values()
